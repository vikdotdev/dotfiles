:#+title: My Emacs configuration
#+STARTUP: overview

:PROPERTIES:
:header-args: :tangle yes
:END:

* Configuration management
#+begin_src emacs-lisp
(defun vik/reload-config ()
  "Reload my Emacs configuration from the Org file."
  (interactive)
  (shell-command "dot")
  (org-babel-load-file (expand-file-name "~/.config/myemacs/config.org")))
#+end_src

* Wiki
** Prog mode
Prog mode is a basic major mode for buffers containing programming language source code. All of the major modes for programming languages that are built into Emacs are derived from it.

** Org mode
   Once point is on heading:
   - =Tab= cycles local visibility.
   - =S-Tab= cycles global visibility.

   Once point is in a bulleted-list:
   - =Tab= toggles local visibility of the list item if it has nested items

   For both:
   - =Alt-Right= or =Alt-Left= promotes or demotes an entry (indents or removes indentation)
   - =Alt-Up= and =Alt-Down= moves entry up and down

*** Refiling
    asdf


* TODO Packages to look at
- https://github.com/cyrus-and/zoom
* Default shortcuts
* Repositories
#+begin_src emacs-lisp
(require 'package)

(setq package-archives
      '(("melpa" . "https://melpa.org/packages/")
        ("org" . "https://orgmode.org/elpa/")
        ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents (package-refresh-contents))
#+end_src

* Defaults
#+begin_src emacs-lisp
; C-n adds new lines
(setq next-line-add-newlines t)
#+end_src
* Introspection
** Keycast
#+begin_src emacs-lisp
(unless (package-installed-p 'keycast)
  (package-install 'keycast))
(require 'keycast)

(keycast-mode-line-mode)
#+end_src

* In-buffer movement & editing
** TODO Buffer management
#+begin_src emacs-lisp
(defun vik/switch-to-previous-buffer ()
  (interactive)
  (switch-to-buffer (other-buffer (current-buffer) 1)))
#+end_src
** =meow= config
:PROPERTIES:
:header-args: :tangle no
:END:

#+begin_src emacs-lisp
(unless (package-installed-p 'meow)
  (package-install 'meow))

  (require 'meow)
  (defun vdd/meow-setup ()
    (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
    (meow-motion-overwrite-define-key
     '("j" . meow-next)
     '("k" . meow-prev)
     '("<escape>" . ignore))
    (meow-leader-define-key
     ;; SPC j/k will run the original command in MOTION state.
     '("j" . "H-j")
     '("k" . "H-k")
     ;; Use SPC (0-9) for digit arguments.
     '("1" . meow-digit-argument)
     '("2" . meow-digit-argument)
     '("3" . meow-digit-argument)
     '("4" . meow-digit-argument)
     '("5" . meow-digit-argument)
     '("6" . meow-digit-argument)
     '("7" . meow-digit-argument)
     '("8" . meow-digit-argument)
     '("9" . meow-digit-argument)
     '("0" . meow-digit-argument)
     '("/" . meow-keypad-describe-key)
     '("?" . meow-cheatsheet))
    (meow-normal-define-key
     '("0" . meow-expand-0)
     '("9" . meow-expand-9)
     '("8" . meow-expand-8)
     '("7" . meow-expand-7)
     '("6" . meow-expand-6)
     '("5" . meow-expand-5)
     '("4" . meow-expand-4)
     '("3" . meow-expand-3)
     '("2" . meow-expand-2)
     '("1" . meow-expand-1)
     '("'" . repeat)
     '("-" . negative-argument)
     '(";" . meow-reverse)
     '(":" . meow-goto-line)
     '("," . meow-inner-of-thing)
     '("." . meow-bounds-of-thing)
     '("[" . meow-beginning-of-thing)
     '("]" . meow-end-of-thing)

     '("a" . meow-append)
     '("i" . meow-insert)
     '("e" . meow-expand-1)

     ;; TODO change should save stuff to kill ring
     '("c" . meow-change)

     '("o" . meow-open-below)
     '("O" . meow-open-above)

     '("b" . meow-left)
     '("f" . meow-right)
     '("n" . meow-next)
     '("p" . meow-prev)

     ;; '("S" . my/meow-select-symbol) ;; TODO M + W
     '("w" . meow-next-word)
     '("W" . meow-next-symbol)
     '("m" . meow-back-word)
     '("M" . meow-back-symbol)

     '("t" . meow-find)

     '("g" . meow-cancel-selection)
     '("G" . meow-grab)

     ;; '("o" . meow-block) TODO bind. what is a block?
     ;; '("O" . meow-to-block)

     '("J" . meow-join)
     '("l" . meow-line)
     ;; '("n" . meow-search)

     '("y" . meow-yank)
     '("Y" . meow-yank-pop)
     '("s" . meow-save)
     '("k" . meow-kill)
     '("d" . meow-backward-delete)
     '("x" . meow-delete)

     ;; TODO replace should save stuff to kill ring
     '("r" . meow-replace)
     '("U" . undo-redo)
     '("u" . meow-undo)
     '("z" . meow-pop-selection)
     '("<escape>" . ignore)))

  (setq meow-expand-hint-remove-delay 0)

  (with-eval-after-load 'meow
    (meow-global-mode 1)
    (vdd/meow-setup))
#+end_src

** Scrolling
*** Smooth scrolling
Pixel scroll precision mode only works for mouse and touchpad.
#+begin_src emacs-lisp
    (pixel-scroll-precision-mode)

    ;; (unless (package-installed-p 'scroll-on-jump)
    ;; (package-install 'scroll-on-jump))
    ;; (require 'scroll-on-jump)
    ;; (with-eval-after-load 'scroll-on-jump
    ;;   (with-eval-after-load 'meow
    ;;     (scroll-on-jump-advice-add undo-redo)
    ;;     (scroll-on-jump-advice-add meow-undo))
    ;;   (scroll-on-jump-with-scroll-advice-add scroll-up-command)
    ;;   (scroll-on-jump-with-scroll-advice-add scroll-down-command)
    ;;   (scroll-on-jump-with-scroll-advice-add recenter-top-bottom))

#+end_src

*** TODO Half-page scrolling
#+begin_src emacs-lisp
(defun vik/scroll-half-page (direction)
  "Scrolls half page up if `direction' is non-nil, otherwise will scroll half page down."
  (let ((opos (cdr (nth 6 (posn-at-point)))))
    ;; opos = original position line relative to window
    (move-to-window-line nil)  ;; Move cursor to middle line
    (if direction
        (recenter-top-bottom -1)  ;; Current line becomes last
      (recenter-top-bottom 0))  ;; Current line becomes first
    (move-to-window-line opos)))  ;; Restore cursor/point position

(defun vik/scroll-half-page-down ()
  "Scrolls exactly half page down keeping cursor/point position."
  (interactive)
  (my/scroll-half-page nil))

(defun vik/scroll-half-page-up ()
  "Scrolls exactly half page up keeping cursor/point position."
  (interactive)
  (my/scroll-half-page t))
#+end_src

** Joining lines
Similar default shortcut is =M-^=, but it works in the other direction.

#+begin_src emacs-lisp
(defun vik/join-line-with-next ()
  "Join the current line with the next line, similar to Vim's J."
  (interactive)
  (join-line -1))
#+end_src
* Keybindings
* Navigation
  #+begin_src emacs-lisp
	    (unless (package-installed-p 'devil)
	  (package-install 'devil))
	;;;(setq devil-lighter " \U0001F608")	

    ;; (setq devil-prompt "\U0001F608 %t")
	(global-devil-mode)
	
    (global-set-key (kbd "C-;") 'global-devil-mode)
(devil-set-key (kbd ";"))
    (assoc-delete-all "%k SPC" "%k RET" "%k <return>" devil-special-keys)
  #+end_src
* Appearance
** Hide unnecessary things
#+begin_src emacs-lisp
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
(setq inhibit-startup-message t)
(setq ring-bell-function 'ignore)
#+end_src
** Faces
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "Iosevka" :height 120)
(setq doom-font (font-spec :family "Iosevka" :size 16 :weight 'normal))
(setq doom-big-font (font-spec :family "Iosevka" :size 28 :weight 'normal))
(setq doom-variable-pitch-font (font-spec :family "IosevkaEtoile" :size 16 :weight 'normal))

#+end_src
** Theme, spacing and colors
#+begin_src emacs-lisp


    (load-theme 'wombat)
    ;; (load-theme 'dichromacy)
    (set-fringe-mode 10)
#+end_src

* Menus and search
#+begin_src emacs-lisp
(fido-vertical-mode)
(recentf-mode 1)
#+end_src
* Org
TODO customize org-directory variable, to store attachments in one place
#+begin_src emacs-lisp
  (setq org-directory "~/Documents/notes/org/0-inbox/")
  (setq org-agenda-files '("~/Documents/notes/org/0-inbox/"
	"~/Documents/notes/org/1-projects/"
	"~/Documents/notes/org/2-areas/"
	"~/Documents/notes/org/3-resources/"))
  (setq org-adapt-indentation t)
    (delete-selection-mode) ;; TODO move this
    ;; (visual-line-mode) ;; TODO do in org documents only
    (add-hook 'org-mode-hook 'visual-line-mode)
    (setq org-hide-emphasis-markers t)

  #+end_src
  _test_ another thing df*

https://github.com/abo-abo/org-download TODO
https://github.com/rexim/org-cliplink
https://github.com/magit/orgit maybe
https://github.com/integral-dw/org-superstar-mode def
#+begin_src emacs-lisp

      ;; Ensure org-appear package is loaded (install if needed)

    ;; Enable all org-appear options
    (setq org-appear-autoemphasis t        ;; Toggle emphasis markers
	  org-appear-autolinks t           ;; Toggle links
	  org-appear-autosubmarkers t      ;; Toggle subscript/superscript markers
	  org-appear-autoentities t        ;; Toggle Org entities
	  org-appear-autokeywords t        ;; Toggle keywords in org-hidden-keywords
	  org-appear-inside-latex t        ;; Toggle LaTeX fragment elements
	  org-appear-delay 0.5             ;; Delay before toggling (set to preferred delay)
	  org-appear-trigger 'always)      ;; Trigger setting (e.g., on hover or always)
    (use-package org-appear ; better markup edit
    :hook (org-mode . org-appear-mode))

  
  (use-package org-superstar ; "prettier" bullets
    :hook (org-mode . org-superstar-mode)
    :config
    ;; Make leading stars truly invisible, by rendering them as spaces!
    (setq org-superstar-leading-bullet ?\s
	  org-superstar-leading-fallback ?\s
	  org-hide-leading-stars nil
	  org-superstar-todo-bullet-alist
	  '(("TODO" . 9744)
	    ("[ ]"  . 9744)
	    ("DONE" . 9745)
	    ("[X]"  . 9745))))

  
      ;; (custom-set-faces
      ;;  '(org-level-1 ((t (:inherit outline-1 :height 1.4 :weight bold))))
      ;;  '(org-level-2 ((t (:inherit outline-2 :height 1.3 :weight bold))))
      ;;  '(org-level-3 ((t (:inherit outline-3 :height 1.2))))
      ;;  '(org-level-4 ((t (:inherit outline-4 :height 1.1))))
      ;;  '(org-level-5 ((t (:inherit outline-5 :height 1.0)))))

      ;; (use-package org-superstar
      ;;   :ensure t
      ;;   :hook (org-mode . org-superstar-mode)
      ;;   :config
      ;;   (setq org-superstar-headline-bullets-list '("◉" "○" "✸" "✿" "■")
      ;;         org-superstar-item-bullet-alist '((?+ . ?•) (?- . ?•))))

      ;; (add-hook 'org-mode-hook #'visual-line-mode)
      ;; (add-hook 'org-mode-hook #'org-indent-mode)
      ;; (setq org-src-fontify-natively t)
#+end_src
* Coding
** Word symbols
Camel-cased symbols will be recognized as words.
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'subword-mode)
#+end_src

** LSP configuration
Attaches eglot to every programming language buffer:
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'eglot-ensure)
#+end_src

** Documentation
#+begin_src emacs-lisp
(global-eldoc-mode 1)
#+end_src
** Basic code navigation with =dumb-jump=
Attaches dumb-jump as xref back-end:
#+begin_src emacs-lisp
  (unless (package-installed-p 'dumb-jump)
    (package-install 'dumb-jump))
  (require 'dumb-jump)

  (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)

#+end_src
** Treesitter configuration
Treesitter sources:
#+begin_src emacs-lisp
(with-eval-after-load 'treesit
  (setq treesit-language-source-alist
        '(
          (typescript . ("https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src"))
          (tsx . ("https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src"))
          (ruby . ("https://github.com/tree-sitter/tree-sitter-ruby"))
          (zig . ("https://github.com/tree-sitter-grammars/tree-sitter-zig"))))

  (dolist (source treesit-language-source-alist)
    (unless (treesit-ready-p (car source))
      (treesit-install-language-grammar (car source)))))
#+end_src

** Zig
*** Packages
#+begin_src emacs-lisp
(unless (package-installed-p 'zig-mode)
  (package-install 'zig-mode))
#+end_src

*** TODO LSP
TODO install zls manually and change this path.
#+begin_src emacs-lisp
(add-to-list 'exec-path "~/.config/emacs/.local/etc/lsp/zig")
;; (setq lsp-zig-zls-executable "~/.config/emacs/.local/etc/lsp/zig/zls")
(with-eval-after-load 'eglot
  (add-to-list 'eglot-server-programs
               '(zig-mode . ("zls"))))
#+end_src
*** Treesitter
#+begin_src emacs-lisp
(autoload 'zig-mode "zig-mode" nil t)
(add-to-list 'auto-mode-alist '("\\.zig\\'" . zig-mode))
(add-to-list 'auto-mode-alist '("\\.zig.zon\\'" . zig-mode))
#+end_src

** Ruby
*** Packages
#+begin_src emacs-lisp
(unless (package-installed-p 'ruby-ts-mode)
  (package-install 'ruby-ts-mode))
#+end_src
*** LSP
#+begin_src emacs-lisp
(with-eval-after-load 'eglot
  (add-to-list 'eglot-server-programs
               '(ruby-ts-mode . ("solargraph" "stdio"))))
#+end_src
*** Treesitter
#+begin_src emacs-lisp
(autoload 'ruby-ts-mode "ruby-ts-mode" nil t)
(add-to-list 'auto-mode-alist '("\\.rb\\'" . ruby-ts-mode))
(add-to-list 'auto-mode-alist '("\\Gemfile\\'" . ruby-ts-mode))
(add-to-list 'auto-mode-alist '("\\Rakefile\\'" . ruby-ts-mode))
#+end_src
* Magit
#+begin_src emacs-lisp
    (unless (package-installed-p 'magit)
    (package-install 'magit))
#+end_src
* KMonad
#+begin_src emacs-lisp
(unless (package-installed-p 'kbd-mode)
(package-vc-install
 '(kbd-mode . (:url "https://github.com/kmonad/kbd-mode"))))
#+end_src
