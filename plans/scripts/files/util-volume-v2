#!/usr/bin/env ruby

# Author: Viktor Habchak <vikdotdev@gmail.com>
#
# Description:
# This script is intended to act as pactl wrapper, that is capable
# of setting custom volume boandaries for the currently available sinks.

require 'optparse'
require 'json'
require 'fileutils'

def which!(command)
  present = system("which #{command} > /dev/null 2>&1")

  return if present

  `notify-send "#{command} is not in PATH"`
  exit(false)
end

which!('pactl')

PACTL_MIN_VERSION = 16.1

output = `pactl --version`.scan(/pactl (\d+\.\d+)/).flatten
if !output.empty? && output.first.to_f < PACTL_MIN_VERSION
  puts "Requires pactl version at least #{PACTL_MIN_VERSION}"
  exit(1)
end

BASE_VOL_INT = 65536
DEFAULT_BOUNDARY = 100
BOUNDARY_HARD_LIMIT = 125
VOLUME_BOUNDARIES_KEY = "sink_volume_boundaries"
SINK_BLACKLIST_KEY = "sink_blacklist"
EMPTY_CONFIG_STRUCTURE = {VOLUME_BOUNDARIES_KEY => {}, SINK_BLACKLIST_KEY => []}

def config_path = File.join(Dir.home, ".local/share/scripts/pactl-sink-config.json")

def config
  @config ||= begin
    if File.exist?(config_path)
      JSON.parse(File.read(config_path))
    else
      FileUtils.mkdir_p(File.dirname(config_path))
      File.open(config_path, "w") do |f|
        f.write(EMPTY_CONFIG_STRUCTURE.to_json)
      end

      JSON.parse(File.read(config_path))
    end
  end
rescue Errno::ENOENT => e
  puts "Error reading file"
  puts e.message
  exit(1)
rescue JSON::ParserError => e
  puts "Error parsing file"
  puts e.message
  exit(1)
end

def sink_volume_boundary(sink_name)
  config.dig(VOLUME_BOUNDARIES_KEY, sink_name) || DEFAULT_BOUNDARY
end

def set_sink_volume_boundary!(value)
  value = [BOUNDARY_HARD_LIMIT, value].min

  if File.exist?(config_path)
    JSON.parse(File.read(config_path))
    config.fetch(VOLUME_BOUNDARIES_KEY)[current_sink_name] = value

    File.open(config_path, "w") do |f|
      f.write(config.to_json)
    end
    @config = nil
  else
    puts "Config does not exist."
    exit(1)
  end
rescue Errno::ENOENT => e
  puts "Error reading file"
  puts e.message
  exit(1)
rescue JSON::ParserError => e
  puts "Error parsing file"
  puts e.message
  exit(1)
end

def current_sink_info = @current_sink_info ||= JSON.parse(`pactl -f json info`)
def current_sink_name = current_sink_info.fetch("default_sink_name")
def current_sink = sink_list.find { _1["name"] == current_sink_name }
def sink_list = @sink_list ||= JSON.parse(`pactl -f json list sinks`)
def set_current_sink_volume!(value) = system("pactl set-sink-volume #{current_sink_name} #{value}%")

def current_sink_volume
  volume = current_sink.fetch("volume")
  front_left_volume = volume.fetch("front-left").fetch("value")
  front_right_volume = volume.fetch("front-right").fetch("value")

  (front_left_volume + front_right_volume) / 2
rescue KeyError => e
  puts "Failed to fetch current volume level"
  puts e.backtrace.take(5)
  exit(1)
end

def relative_int_to_percent(value) = value.to_f / BASE_VOL_INT * 100
def bounded_percent(value) = [value, sink_volume_boundary(current_sink_name)].min

parser = OptionParser.new do |opts|
  opts.banner = <<~DESC
    Volume management script. Example usage:

    util-volume-v2 -d 5 # increases volume by 5%
    util-volume-v2 -i 5 # increases volume by 5%
    util-volume-v2      # prints current volume level
  DESC

  opts.on('-iVALUE', '--inc=VALUE', 'Increase volume by percentage value') do |value|
    relative_int_to_percent(current_sink_volume)
      .then { bounded_percent(_1 + value.to_i) }
      .then { set_current_sink_volume!(_1) }
  end

  opts.on('-dVALUE', '--dec=VALUE', 'Decrease volume by percentage value') do |value|
    relative_int_to_percent(current_sink_volume)
      .then { (new_value = _1 - value.to_i) <= 0 ? 0 : new_value }
      .then { bounded_percent(_1) }
      .then { set_current_sink_volume!(_1) }
  end

  opts.on('-bVALUE', '--set-boundary=VALUE', "Set current sink boundary") do |value|
    value = value.to_i
    if value.positive?
      set_sink_volume_boundary!(value)

      relative_int_to_percent(current_sink_volume)
        .then { value < _1 ? value : _1 }
        .then { bounded_percent(_1) }
        .then { set_current_sink_volume!(_1) }
    else
      puts "Value cannot be negative"
    end
  end

  opts.on('-p', '--print', 'Print current percentage volume value') do
    puts "Current volume: #{relative_int_to_percent(current_sink_volume).round.to_i}"
  end

  opts.on_tail('--help', 'Print help') do
    puts opts
    exit
  end
end

parser.parse('--help') if ARGV.empty?

config # initialize config
parser.parse!

