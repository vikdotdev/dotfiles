#!/bin/bash
#
# Author: Viktor Habchak <vikdotdev@gmail.com>
#
# Description:
# This script is intended to act as pactl wrapper, that is capable
# of setting custom volume boandaries for the currently available sinks.

# Configuration
CONFIG_FILE="$HOME/.local/share/scripts/pactl_sink_config"
PACTL_MIN_VERSION=16.1
BASE_VOL_INT=65536
DEFAULT_BOUNDARY=100
BOUNDARY_HARD_LIMIT=125

# Check if pactl is available
if ! which pactl > /dev/null 2>&1; then
  notify-send "pactl is not in PATH"
  exit 1
fi

# Check pactl version
PACTL_VERSION=$(pactl --version | grep -oP 'pactl \K\d+\.\d+')
if [ "$(echo "$PACTL_VERSION < $PACTL_MIN_VERSION" | bc)" -eq 1 ]; then
  echo "Requires pactl version at least $PACTL_MIN_VERSION"
  exit 1
fi

# Create config file if it doesn't exist
if [ ! -f "$CONFIG_FILE" ]; then
  mkdir -p "$(dirname "$CONFIG_FILE")"
  echo "DEFAULT $DEFAULT_BOUNDARY\n" > "$CONFIG_FILE"
fi

read_config() {
  local sink_name=$1
  local boundary_value=$(grep "^$sink_name " "$CONFIG_FILE" | cut -d ' ' -f2)

  if [ -z "$boundary_value" ]; then
    echo "$DEFAULT_BOUNDARY"
  else
    echo "$boundary_value"
  fi
}

# Write configuration
write_config() {
  local sink_name=$1
  local value=$2
  if grep -q "^$sink_name " "$CONFIG_FILE"; then
    sed -i "/^$sink_name /c\\$sink_name $value" "$CONFIG_FILE"
  else
    echo "$sink_name $value\n" >> "$CONFIG_FILE"
  fi
}

# Get current sink information
current_sink_name=$(pactl info | grep 'Default Sink' | cut -d ' ' -f3)
current_sink_volume=$(pactl get-sink-volume "$current_sink_name" | grep -oP '\d+%' | head -1 | tr -d '%')

# Adjust volume
adjust_volume() {
  local change=$1
  local boundary=$(read_config "$current_sink_name")
  echo "Debug: Current sink name is '$current_sink_name'"
  echo "Debug: Boundary value is '$boundary'"

  local change=$1

  # Check if current_sink_volume is an integer
  if ! [[ "$current_sink_volume" =~ ^[0-9]+$ ]]; then
    echo "Error: Current sink volume is not a valid integer."
    exit 1
  fi

  local new_volume=$((current_sink_volume + change))
  local boundary=$(read_config "$current_sink_name" || echo "$DEFAULT_BOUNDARY")

  # Check if boundary is an integer
  echo "Debug: Boundary before integer check is '$boundary'"
  if ! [[ "$boundary" =~ ^[0-9]+$ ]]; then
    echo "Error: Volume boundary is not a valid integer."
    exit 1
  fi

  if [ "$new_volume" -gt "$boundary" ]; then
    new_volume="$boundary"
  elif [ "$new_volume" -lt 0 ]; then
    new_volume=0
  fi

  pactl set-sink-volume "$current_sink_name" "${new_volume}%"
}

# Parse arguments
case "$1" in
  -i|--inc)
    adjust_volume "$2"
    ;;
  -d|--dec)
    adjust_volume "-$2"
    ;;
  -p|--print)
    echo $current_sink_volume
    ;;
  -b|--set-boundary)
    if [ "$2" -ge 0 ] && [ "$2" -le "$BOUNDARY_HARD_LIMIT" ]; then
      write_config "$current_sink_name" "$2"
    else
      echo "Boundary value must be between 0 and $BOUNDARY_HARD_LIMIT"
    fi
    ;;
  *)
    echo "Usage: $0 {-i|--inc <value> | -d|--dec <value> | -b|--set-boundary <value> | -p|--print}"
    exit 1
    ;;
esac
