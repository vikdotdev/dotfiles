#!/usr/bin/env bash

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to detect machine profile
detect_profile() {
    local hostname=$(hostname)
    case "$hostname" in
        "umbra")
            echo "umbra"
            ;;
        "reddwarf")
            echo "reddwarf"
            ;;
        "redgiant")
            echo "redgiant"
            ;;
        *)
            error "Unknown hostname '$hostname'. Profile must be specified explicitly."
            error "Usage: $0 [umbra|reddwarf|redgiant]"
            exit 1
            ;;
    esac
}

# Function to check if we're running on NixOS
check_nixos() {
    if [ ! -f /etc/nixos/configuration.nix ]; then
        error "This script must be run on NixOS"
        exit 1
    fi
}

# Function to parse command line arguments
parse_arguments() {
    DOTFILES_DIR=""
    PROFILE=""
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            --location)
                DOTFILES_DIR="$2"
                shift 2
                ;;
            --profile)
                PROFILE="$2"
                shift 2
                ;;
            -h|--help)
                show_usage
                exit 0
                ;;
            *)
                error "Unknown argument: $1"
                show_usage
                exit 1
                ;;
        esac
    done
    
    if [ -z "$DOTFILES_DIR" ]; then
        error "Dotfiles directory is required"
        error "Use --location to specify where to clone the repository"
        show_usage
        exit 1
    fi
    
    # Expand ~ to home directory
    DOTFILES_DIR="${DOTFILES_DIR/#\~/$HOME}"
}

# Function to show usage
show_usage() {
    echo "Usage: $0 --location <PATH> [--profile <PROFILE>]"
    echo ""
    echo "Setup NixOS with dotfiles configuration"
    echo ""
    echo "Options:"
    echo "  --location <PATH>    Path where dotfiles should be cloned (required)"
    echo "  --profile <PROFILE>  Machine profile (optional if hostname matches)"
    echo "  -h, --help          Show this help message"
    echo ""
    echo "Profiles:"
    echo "  umbra    - Desktop with NVIDIA drivers"
    echo "  reddwarf - Laptop with power management"
    echo "  redgiant - Laptop with kmonad keyboard mapping"
    echo ""
    echo "Examples:"
    echo "  $0 --location ~/Repositories/dotfiles --profile umbra"
    echo "  $0 --location /home/user/dotfiles --profile reddwarf"
    echo "  $0 --location ~/dotfiles  # Auto-detect profile from hostname"
}

# Function to setup dotfiles repository
setup_dotfiles_repo() {
    local dotfiles_dir="$1"
    local parent_dir=$(dirname "$dotfiles_dir")
    
    # Check if directory already exists
    if [ -d "$dotfiles_dir" ]; then
        error "Directory already exists: $dotfiles_dir"
        error "Please remove it or choose a different path"
        exit 1
    fi
    
    # Create parent directory if it doesn't exist
    if [ ! -d "$parent_dir" ]; then
        info "Creating directory: $parent_dir"
        mkdir -p "$parent_dir"
    fi
    
    # Clone repository
    info "Cloning dotfiles repository to: $dotfiles_dir"
    git clone -b nix-migration https://github.com/vikdotdev/dotfiles.git "$dotfiles_dir"
    
    success "Dotfiles repository cloned to: $dotfiles_dir"
}

# Function to check if hardware-configuration.nix exists
check_hardware_config() {
    local dotfiles_dir="$1"
    
    # Ensure hardware config exists in system location
    if [ ! -f /etc/nixos/hardware-configuration.nix ]; then
        warn "No hardware configuration found, generating..."
        sudo nixos-generate-config --root /
        success "Hardware configuration generated"
    else
        info "Using existing hardware configuration from /etc/nixos/"
    fi
}

# Function to deploy NixOS configuration
deploy_nixos() {
    local dotfiles_dir="$1"
    local profile="$2"
    
    info "Building NixOS configuration for profile: $profile"
    
    # Use nixos-rebuild with --impure to allow access to /etc
    if sudo nixos-rebuild build --flake "$dotfiles_dir#$profile" --impure; then
        success "NixOS configuration built successfully"
    else
        error "Failed to build NixOS configuration"
        exit 1
    fi
    
    # Apply the configuration
    info "Applying NixOS configuration..."
    if sudo nixos-rebuild switch --flake "$dotfiles_dir#$profile" --impure; then
        success "NixOS configuration applied successfully"
    else
        error "Failed to apply NixOS configuration"
        exit 1
    fi
}

# Function to deploy Home Manager configuration
deploy_home_manager() {
    local dotfiles_dir="$1"
    local profile="$2"
    local username=$(whoami)
    
    info "Installing Home Manager configuration for $username@$profile"
    
    # Check if Home Manager is available
    if ! command -v home-manager >/dev/null 2>&1; then
        info "Installing Home Manager..."
        nix run nixpkgs#home-manager -- switch --flake "$dotfiles_dir#$username@$profile"
    else
        home-manager switch --flake "$dotfiles_dir#$username@$profile"
    fi
    
    if [ $? -eq 0 ]; then
        success "Home Manager configuration applied successfully"
    else
        error "Failed to apply Home Manager configuration"
        exit 1
    fi
}


# Function to verify setup
verify_setup() {
    local profile="$1"
    
    info "Verifying NixOS setup..."
    
    # Check basic system functionality
    if systemctl is-active --quiet NetworkManager; then
        success "NetworkManager is running"
    else
        warn "NetworkManager is not running"
    fi
    
    # Check if Home Manager environment is loaded
    if [ -n "$HOME" ] && [ -f "$HOME/.nix-profile/bin/home-manager" ]; then
        success "Home Manager is installed"
    else
        warn "Home Manager may not be properly installed"
    fi
    
    success "Setup verification completed"
}

# Main function
main() {
    info "Starting NixOS setup..."
    
    # Parse command line arguments
    parse_arguments "$@"
    
    # Check if we're on NixOS
    check_nixos
    
    # Ensure git is available for repository operations
    if ! command -v git >/dev/null 2>&1; then
        info "Git not found, downloading script and running with nix-shell..."
        
        # Download script to temporary file
        local temp_script=$(mktemp)
        curl -L https://raw.githubusercontent.com/vikdotdev/dotfiles/nix-migration/bin/setup-nixos -o "$temp_script"
        chmod +x "$temp_script"
        
        # Run with nix-shell
        exec nix-shell -p git --run "$temp_script $*"
    fi
    
    info "Using dotfiles directory: $DOTFILES_DIR"
    
    # Setup dotfiles repository
    setup_dotfiles_repo "$DOTFILES_DIR"
    
    # Get profile from argument or detect from hostname
    local profile=""
    if [ -n "$PROFILE" ]; then
        profile="$PROFILE"
        info "Using specified profile: $profile"
    else
        profile=$(detect_profile)
        info "Detected profile: $profile"
    fi
    
    # Validate profile
    if [[ ! "$profile" =~ ^(umbra|reddwarf|redgiant)$ ]]; then
        error "Invalid profile: $profile. Must be one of: umbra, reddwarf, redgiant"
        exit 1
    fi
    
    # Check hardware configuration
    check_hardware_config "$DOTFILES_DIR"
    
    # Deploy NixOS configuration
    deploy_nixos "$DOTFILES_DIR" "$profile"
    
    # Deploy Home Manager configuration
    deploy_home_manager "$DOTFILES_DIR" "$profile"
    
    # Verify setup
    verify_setup "$profile"
    
    success "NixOS setup completed successfully!"
    info "You may want to reboot to ensure all changes take effect"
    info "Run 'sudo reboot' when ready"
}


# Run main function
main "$@"
