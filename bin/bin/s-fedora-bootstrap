#!/bin/bash


if [ $EUID -eq 0 ]; then
  echo "Do not run this script as sudo."
  exit 1
fi

read -sp 'Password: ' PASSWORD

function skipping {
  echo "$1. Skipping"
}

echo 'Updating...'
{
  echo $PASSWORD | sudo --stdin dnf update -y
} &> /dev/null

echo 'Installing essential packages...'
{
  echo $PASSWORD | sudo --stdin dnf install -y gnome-tweak-tool vim stow deluge emacs ripgrep imwheel tmux \
    xclip ripgrep git fd-find clang curl editorconfig ShellCheck clang aspell aspell-en git-credential-libsecret
} &> /dev/null

echo 'Installing rpmfusion...'
{
  echo $PASSWORD | sudo --stdin dnf install \
    https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm \
    https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm -y
  echo $PASSWORD | sudo --stdin dnf groupupdate Multimedia -y
} &> /dev/null

echo "Installing Ruby dependencies..."
{
  echo $PASSWORD | sudo --stdin dnf install -y patch autoconf automake bison glibc-headers libffi-devel \
    libtool libyaml-devel patch readline-devel sqlite-devel zlib-devel \
    openssl-devel glibc-headers
} &> /dev/null

echo 'Installing telegram...'
if [ -x "$(command -v telegram-desktop)" ]; then
  skipping 'telegram-desktop binary found'
else
  {
    echo $PASSWORD | sudo --stdin dnf install telegram -y
  } &> /dev/null
fi

echo 'Installing xcape...'
if [ -x "$(command -v xcape)" ]; then
  skipping 'xcape binary found'
else
  {
    mkdir ~/Repositories && cd ~/Repositories

    git clone https://github.com/alols/xcape.git
    echo $PASSWORD | sudo --stdin dnf install git gcc make pkgconfig libX11-devel libXtst-devel libXi-devel cmake -y
    cd xcape
    make
    echo $PASSWORD | sudo --stdin make install
  } &> /dev/null
fi

echo "Installing iosevka font..."
font_files=$(ls ~/.fonts/iosevka-* 2> /dev/null | wc -l)
if [ "$font_files" != "0" ]
then
  skipping "~/.fonts/iosevka-* found"
else
  {
    command -v wget && cd ~/Downloads && wget https://github.com/be5invis/Iosevka/releases/download/v3.0.0-rc.5/07-iosevka-curly-3.0.0-rc.5.zip
    mkdir ~/.fonts
    command -v unzip && unzip 07-iosevka-curly-3.0.0-rc.5.zip 'ttf/*' -d ~/.fonts/
    cd ~/.fonts && mv ttf/* . && rm -rf ttf
  } &> /dev/null
fi

echo "Installing dotfiles..."
if [ -d "$HOME/Repositories/dotfiles" ]; then
  skipping '~/Repositories/dotfiles found'
else
  {
    [ ! -d "$HOME/Repositories" ] && mkdir ~/Repositories
    cd ~/Repositories
    git clone https://github.com/vikdotdev/dotfiles

    cd
    [ -s "$HOME/.profile" ] && mv .profile .profile.default
    [ -s "$HOME/.bash_profile" ] && mv .bash_profile .bash_profile.default
    [ -s "$HOME/.bashrc" ] && mv .bashrc .bashrc.default
    [ -s "$HOME/.inputrc" ] && mv .inputrc .inputrc.default
    cd && ./Repositories/dotfiles/bin/bin/s-dotfiles-sync
  } &> /dev/null
fi


echo "Installing Doom..."
if [ -f "$HOME/.emacs.d/bin/doom" ]; then
  skipping "$HOME/.emacs.d/bin/doom binary found"
else
  {
    cd && rm -r ~/.emacs
    cd && git clone https://github.com/hlissner/doom-emacs ~/.emacs.d
    yes | ~/.emacs.d/bin/doom install
  } &> /dev/null
fi

echo "Installing rvm..."
if [ -x "$(command -v rvm)" ]; then
  skipping "rvm binary found"
else
  {
    \curl -sSL https://get.rvm.io | bash
    source ~/.rvm/scripts/rvm
  } &> /dev/null
fi

echo "Installing yarn..."
if [ -x "$(command -v yarn)" ]; then
  skipping "yarn binary found"
else
  {
    YARN_REPO=$(curl --silent --location https://dl.yarnpkg.com/rpm/yarn.repo)
    { echo $PASSWORD; echo "$YARN_REPO"; } | sudo --stdin tee /etc/yum.repos.d/yarn.repo
    echo $PASSWORD | sudo --stdin dnf install yarn -y
  } &> /dev/null
fi

echo "Configuring tmux..."
if [ -d "$HOME/.tmux" ]; then
  skipping "$HOME/.tmux found"
else
  {
    cd
    rm -r ~/.tmux
    git clone https://github.com/gpakosz/.tmux.git
    ln -s -f .tmux/.tmux.conf
  } &> /dev/null
fi

echo "Installing npm packages..."
if [ -x "$(command -v npm)" ]; then
  {
    mkdir ~/.npm-global
    npm config set prefix '~/.npm-global'
    export PATH=~/.npm-global/bin:$PATH

    npm install -g js-beautify stylelint marked
  } &> /dev/null
fi

echo "Installing ruby..."
if [ -x "$(command -v ruby | grep ~/.rvm/rubies/ruby-2.7.2)" ]; then
  skipping "Ruby 2.7.2 found"
else
  {
    rvm autolibs disable
    rvm install ruby 2.7.2
    rvm use 2.7.2 --default
  } &> /dev/null
fi


echo "Installing ruby gems..."
if [ -x "$(command -v gem)" ]; then
  {
    gem install bundler
    gem install tmuxinator
  } &> /dev/null
fi


echo "Configuring GNOME..."
gsettings set org.gnome.desktop.peripherals.touchpad natural-scroll false
gsettings set org.gnome.desktop.peripherals.touchpad tap-to-click true
gsettings set org.gnome.desktop.peripherals.keyboard delay "250"
gsettings set org.gnome.desktop.peripherals.keyboard repeat-interval "20"
gsettings set org.gnome.desktop.input-sources xkb-options "['lv3:ralt_switch', 'ctrl:nocaps', 'caps:escape']"

gsettings set org.gnome.desktop.wm.keybindings toggle-maximized "['<Super>k']"
gsettings set org.gnome.desktop.interface gtk-theme "Adwaita-dark"

echo "Changing hostname..."
hostnamectl set-hostname pad
