#!/bin/bash
# Author: Viktor Habchak
#   @vikdotdev at github.com
#
# This script is designed to bootstrap my Fedora 33 GNOME development workstation.
# TODO add tmp file to store functions completed in the past
# TODO install vpn
# TODO install gh
# sudo dnf config-manager --add-repo https://cli.github.com/packages/rpm/gh-cli.repo
# sudo dnf install gh
# TODO install rofi
# TODO install bitwarden
# TODO install ninja build system (for lua ls)
# TODO TSInstall all for nvim initial boot
# npm install -g vscode-json-languageserver
# npm i -g bash-language-server
# OBSOLETE npm install -g vscode-css-languageserver-bin
# OBSOLETE npm install -g vscode-html-languageserver-bin
# npm i -g vscode-langservers-extracted
# npm i -g sql-language-server
# npm install -g yaml-language-server

# add default wallpapers folder to dotfiles?
# mkdir -p .local/share/wallpapers

# install backlight control to /etc/X11/xorg.conf
# Section "Device"
#     Identifier  "Intel Graphics"
#     Driver      "intel"
#     Option      "Backlight"  "intel_backlight"
# EndSection
~
~
#
# deno
# curl -fsSL https://deno.land/x/install/install.sh | sh
# add for nvims persistent undo
# mkdir -p .local/share/nvim/undo

NEW_HOSTNAME=pad # default hostname

while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
      -d|--desktop)
      NEW_HOSTNAME=umbra
      shift
      shift
      ;;
      -l|--laptop)
      NEW_HOSTNAME=pad
      shift
      shift
      ;;
      *)
      shift
      ;;
  esac
done

read -sp 'Password: ' PASSWORD
echo

function skip {
  echo "bootstrap >>> $1. Skipping" | tee -a ~/.local/share/fedora-bootstrap/output.log
}

function print {
  echo "bootstrap >>>" "$@" | tee -a ~/.local/share/fedora-bootstrap/output.log
}

function prepare-log-directory {
  mkdir -p ~/.local/share/fedora-bootstrap
}

function exit-if-run-as-sudo {
  if [ $EUID -eq 0 ]; then
    print "Script run as sudo. Aborting"
    exit 1
  fi
}

function execute {
  echo "[$(date +%D-%T)] $@" >> ~/.local/share/fedora-bootstrap/output.log
  {
    eval "$@"
  } &>> ~/fedora-bootstrap.log
}

function execute-with-password {
  echo "[$(date +%D-%T)] sudo $@" >> ~/.local/share/fedora-bootstrap/output.log
  {
    eval "echo $PASSWORD | sudo --stdin $@"
  } &>> ~/.local/share/fedora-bootstrap/output.log
}

function check-password-correctness {
  [ -z "$PASSWORD" ] && print 'Password is empty. Aborting' && exit 1

  local INCORRECT=0

  {
    echo "$PASSWORD" | sudo --stdin false && INCORRECT=1
  } > /dev/null

  if [ "$INCORRECT" -eq 1 ]; then
    print "Incorrect password. Aborting"
    exit 1
  fi
}

function update-system-packages {
  print 'updating system packages'

  execute-with-password "dnf update -y"
}

function install-packages {
  print 'installing utils'

  execute-with-password "dnf install -y vim stow imwheel wget unzip xclip git curl clang git-credential-libsecret snapd sensible-browser xdotool git-delta screenkey compton stack redshift urlview xbacklight"
  execute-with-password "ln -s /var/lib/snapd/snap /snap"
}

function install-rpm-fusion {
  print 'installing rpmfusion'

  execute-with-password "dnf install -y https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm"
  execute-with-password "dnf install -y https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm"
  execute-with-password "dnf groupupdate Multimedia -y"
}

function configure-gnome {
  print "configuring GNOME"

  if [ "$NEW_HOSTNAME" == "pad" ]; then
    execute "gsettings set org.gnome.desktop.input-sources xkb-options \"['lv3:ralt_switch', 'ctrl:nocaps', 'caps:escape']\""
  fi

  if [ "$NEW_HOSTNAME" == "top" ]; then
    execute "gsettings set org.gnome.desktop.input-sources xkb-options \"['lv3:ralt_switch', 'grp:caps_toggle']\""
  fi

  execute "gsettings set org.gnome.desktop.peripherals.touchpad natural-scroll false"
  execute "gsettings set org.gnome.desktop.peripherals.touchpad tap-to-click true"
  execute "gsettings set org.gnome.desktop.peripherals.keyboard delay '250'"
  execute "gsettings set org.gnome.desktop.peripherals.keyboard repeat-interval '40'"
  execute "gsettings set org.gnome.desktop.wm.keybindings toggle-maximized \"['<Super>k']\""
  execute "gsettings set org.gnome.desktop.interface gtk-theme \"Adwaita-dark\""
  execute "gsettings set org.gnome.desktop.input-sources sources \"[('xkb', 'us'), ('xkb', 'ua')]\""
}

function install-ruby-deps {
  print "installing ruby dependencies"

  execute-with-password "dnf install -y patch autoconf automake bison glibc-headers libffi-devel libtool libyaml-devel patch readline-devel sqlite-devel zlib-devel openssl-devel glibc-headers"
}

function install-rvm {
  print "installing rvm"

  if [ -x "$(command -v rvm)" ]; then
    skip "rvm binary found"
  else
    execute "\curl -sSL https://get.rvm.io | bash"
    execute "source ~/.rvm/scripts/rvm"
  fi
}

function compile-ruby {
  print "compiling ruby"

  if [ -x "$(command -v ruby | grep ~/.rvm/rubies/ruby-2.7.2)" ]; then
    skip "Ruby 2.7.2 found"
  else
    execute "rvm autolibs disable"
    execute "rvm install ruby 2.7.2"
    execute "rvm use 2.7.2 --default"
  fi
}

function install-gems {
  print "installing gems"

  if [ -x "$(command -v gem)" ]; then
    execute "gem install bundler"
    execute "gem install tmuxinator"
    execute "gem install rufo"
    execute "gem install solargraph"
    execute "gem install pry-doc"
    execute "gem install steep"
  fi
}

function install-xcape {
  print 'installing xcape'

  if [ -x "$(command -v xcape)" ]; then
    skip 'xcape binary found'
  else

    execute '[ ! -d "$HOME/Repositories" ] && mkdir ~/Repositories'
    execute "cd ~/Repositories"
    execute "git clone https://github.com/alols/xcape.git"
    execute-with-password "dnf install git gcc make pkgconfig libX11-devel libXtst-devel libXi-devel cmake -y"
    execute "cd xcape"
    execute "make"
    execute-with-password "make install"
  fi
}

function install-fonts {
  print "installing iosevka"

  font_files=$(ls ~/.fonts/iosevka-* 2> /dev/null | wc -l)
  if [ "$font_files" != "0" ]
  then
    skip "~/.fonts/iosevka-* found"
  else
    execute "cd ~/Downloads"
    execute "wget --no-verbose --show-progress --progress=bar:force https://github.com/be5invis/Iosevka/releases/download/v3.0.0-rc.5/07-iosevka-curly-3.0.0-rc.5.zip"
    execute "mkdir ~/.fonts"
    execute "command -v unzip && unzip 07-iosevka-curly-3.0.0-rc.5.zip 'ttf/*' -d ~/.fonts/"
    execute "cd ~/.fonts && mv ttf/* . && rm -rf ttf"
  fi
}

function install-dotfiles {
  print "installing dotfiles"

  if [ -d "$HOME/Repositories/dotfiles" ]; then
    skip "~/Repositories/dotfiles found"
  else
    execute '[ ! -d "$HOME/Repositories" ] && mkdir ~/Repositories'
    execute "cd ~/Repositories"
    execute "git clone https://github.com/vikdotdev/dotfiles"

    execute "cd"
    execute '[ -s "$HOME/.profile" ] && mv .profile .profile.default'
    execute '[ -s "$HOME/.bash_profile" ] && mv .bash_profile .bash_profile.default'
    execute '[ -s "$HOME/.bashrc" ] && mv .bashrc .bashrc.default'
    execute '[ -s "$HOME/.inputrc" ] && mv .inputrc .inputrc.default'
    execute 'cd && ./Repositories/dotfiles/bin/bin/s-dotfiles-sync'
  fi
}

function install-emacs {
  print "installing emacs"

  if [ -f "$HOME/.emacs.d/bin/doom" ]; then
    skip "$HOME/.emacs.d/bin/doom binary found"
  else
    execute-with-password "dnf install -y emacs ripgrep fd-find editorconfig ShellCheck aspell aspell-en"

    execute "cd && rm -r ~/.emacs"
    execute "cd && git clone https://github.com/hlissner/doom-emacs ~/.emacs.d"
    execute "yes | ~/.emacs.d/bin/doom install"
  fi
}

function install-node-yarn {
  print "installing node & yarn"

  if [ -x "$(command -v yarn)" ]; then
    skip "yarn binary found"
  else
    {
      YARN_REPO=$(curl --silent --location https://dl.yarnpkg.com/rpm/yarn.repo)

      echo $PASSWORD | sudo --stdin true && echo "$YARN_REPO" | sudo tee /etc/yum.repos.d/yarn.repo
    } > /dev/null

    execute-with-password "dnf install yarn -y"
  fi
}

function install-tmux {
  print "installing tmux"

  if [ -d "$HOME/.tmux" ]; then
    skip "$HOME/.tmux found"
  else
    execute-with-password "dnf install -y tmux"
    execute "cd"
    execute "rm -r ~/.tmux"
    execute "git clone https://github.com/gpakosz/.tmux.git"
    execute "ln -s -f .tmux/.tmux.conf"
  fi
}

function install-js-packages {
  print "installing js packages"

  if [ -x "$(command -v npm)" ]; then
    execute "mkdir ~/.npm-global"
    execute "npm config set prefix '~/.npm-global'"
    execute "export PATH=~/.npm-global/bin:$PATH"

    execute "npm install -g js-beautify stylelint marked"
  else
    skip "npm binary not found"
  fi
}

function change-hostname {
  print "changing hostname"

  execute "hostnamectl set-hostname $NEW_HOSTNAME"
}

function install-postgres {
  print "installing postgres"

  execute-with-password "dnf install -y postgresql-server postgresql-contrib libpq-devel"
  execute-with-password "systemctl enable postgresql"
  execute-with-password "postgresql-setup --initdb --unit postgresql"
  execute-with-password "systemctl start postgresql"
  execute-with-password "-u postgres createuser $USER -s"
  execute createdb
  execute-with-password "-u postgres psql -c \"ALTER USER $USER WITH PASSWORD 'password';\""
}

function install-redis {
  print "installing redis"

  execute-with-password "dnf install redis -y"
  execute-with-password "systemctl start redis.service"
  execute-with-password "systemctl enable redis.service"
}

function install-elasticsearch {
  execute "podman pull docker.io/library/elasticsearch:7.9.2"
  execute "podman run -d --name elasticsearch7 -p 9200:9200 -p 9300:9300 -e \"discovery.type=single-node\" elasticsearch:7.9.2"
}

function install-gui-packages {
  print 'installing gui packages'

  execute-with-password "dnf install -y gnome-tweak-tool thunderbird deluge"

  # this is done to initialize snap and avoid the following error:
  # error: too early for operation, device not yet seeded or device model not acknowledged
  execute-with-password "snap install hello-world"
  sleep 30
  execute-with-password "snap install telegram-desktop"
  execute-with-password "snap install slack --classic"
  execute-with-password "snap install skype --classic"
  execute-with-password "snap install spotify"
  execute-with-password "snap install ngrok"
  execute-with-password "dnf install https://zoom.us/client/latest/zoom_x86_64.rpm"
}

function install-flutter {
  execute '[ ! -d "$HOME/Repositories" ] && mkdir ~/Repositories'
  execute "cd ~/Repositories"
  execute "git clone https://github.com/flutter/flutter.git"
  execute "dart"
}

function install-android-studio {
  # WIP
  local URL=$(curl -0 https://developer.android.com/studio#downloads | grep -o --regexp='https:\/\/redirector\.gvt1\.com\/edgedl\/android\/studio\/ide-zips\/[0-9\.]*\/android-studio-ide-[0-9\.]*-linux\.tar\.gz')
  wget "$URL"
  # extract it into /opt
  # TODO add postinstall notices to finish android studio installation

  # install sdk
  # Android/Sdk/cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-28"
}

function install-anyconnect {
  # WIP
  echo wip
}

function install-gnome-extension {
# set -euo pipefail
  uri="gamemodechristian.kellner.me.v4.shell-extension.zip"
  store_url="https://extensions.gnome.org/extension-data"
  extensions_path="$HOME/.local/share/gnome-shell/extensions/"
  zip="gnome-extension.zip"

  cd "$(xdg-user-dir DOWNLOAD)"
  wget "$store_url/$uri" -O "$zip"

  uuid=$(unzip -c "$zip" metadata.json | grep uuid | cut -d \" -f4)

  if [[ ! -d "$extensions_path/$uuid" ]]; then
      mkdir "$extensions_path/$uuid"
      unzip -q "$zip" -d "$extensions_path/$uuid"
      gnome-extensions enable "$uuid"
  fi

  trap 'rm "$zip"' ERR INT TERM EXIT
}

function install-gnome-extensions {
  install-gnome-extension "shell-volume-mixerderhofbauer.at.v37.shell-extension.zip"
  install-gnome-extension "gamemodechristian.kellner.me.v4.shell-extension.zip"
}

function install-spotify {
  execute-with-password "dnf copr enable atim/spotify-tui -y && dnf install spotify-tui"
  secret-tool store --label='name you choose' application rust-keyring service spotifyd username lm31qi6j0fxd1s24bbs5spni5
}

function install-kmonad {
  if [ -x "$(command -v kmonad)" ]; then
    skip 'kmonad binary found'
  else
    execute-with-password "usermod -aG input $USER"
    execute-with-password "groupadd uinput"
    execute-with-password "usermod -aG uinput $USER"
    echo 'KERNEL=="uinput", MODE="0660", GROUP="uinput", OPTIONS+="static_node=uinput"' | execute-with-password "tee /etc/udev/rules.d/90-uinput.rules"

    # This seems to be needed because uinput isn't compiled as a loadable module these days.
    # See https://github.com/chrippa/ds4drv/issues/93#issuecomment-265300511
    echo uinput | execute-with-password "tee /etc/modules-load.d/uinput.conf"

    execute '[ ! -d "$HOME/Repositories" ] && mkdir ~/Repositories'
    execute "cd ~/Repositories"
    execute "git clone https://github.com/kmonad/kmonad.git"
    execute "cd kmonad"

    execute "stack install"
    execute "systemctl --user start --now kmonad.service"
  fi
}

function run-services {
  execute "systemctl --user start --now redshift.service"
}

function main {
  exit-if-run-as-sudo
  prepare-log-directory
  check-password-correctness
  update-system-packages
  install-packages
  configure-gnome
  install-rpm-fusion
  install-ruby-deps
  install-rvm
  compile-ruby
  install-gems
  install-node-yarn
  install-js-packages
  install-dotfiles
  install-fonts
  install-xcape
  install-tmux
  install-emacs
  install-postgres
  install-redis
  install-elasticsearch
  install-flutter
  change-hostname
  install-gui-packages
  install-spotify
  install-kmonad
  run-services

  print "Done."
}

main
