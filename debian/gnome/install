#!/bin/bash

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DOT_HOME="$(dirname "$(dirname "$SCRIPT_DIR")")"

source "$DOT_HOME/lib/debian/include.sh"

MODULE="gnome"
init_module_logging "$MODULE"

log_header "Installing GNOME Extensions and Tools"

# Function to install GNOME extension from GitHub
install_gnome_extension() {
    local extension_name="$1"
    local repo_url="$2"
    local repo_name=$(basename "$repo_url" .git)
    
    log_step "Installing $extension_name extension"
    
    local repo_path="$REPOS_DIR/$repo_name"
    local install_path="$HOME/.local/share/gnome-shell/extensions/$extension_name"
    
    if [[ -d "$install_path" ]]; then
        log_info "Extension $extension_name already installed, skipping"
        return
    fi
    
    mkdir -p "$REPOS_DIR"
    
    if [[ ! -d "$repo_path" ]]; then
        log_info "Cloning $repo_url"
        git clone --depth 50 "$repo_url" "$repo_path"
    else
        log_info "Repository already exists at $repo_path"
    fi
    
    cd "$repo_path"
    log_info "Building and installing $extension_name"
    
    # Check what build system is available
    if [[ -f "Makefile" ]]; then
        make build && make install
    elif [[ -f "pack.sh" ]]; then
        chmod +x pack.sh
        ./pack.sh
        # For pack.sh, usually need to manually copy to extensions dir
        if [[ -f "${extension_name}.shell-extension.zip" ]]; then
            mkdir -p "$install_path"
            unzip -q "${extension_name}.shell-extension.zip" -d "$install_path"
        fi
    elif [[ -f "install.sh" ]]; then
        chmod +x install.sh
        ./install.sh
    else
        # Manual installation - copy source files directly
        log_info "No build system found, copying files manually"
        mkdir -p "$install_path"
        
        # Copy all files except .git and common build artifacts
        find . -maxdepth 1 -type f \( ! -name ".git*" ! -name "*.md" ! -name "LICENSE*" \) -exec cp {} "$install_path/" \;
        
        # Ensure we have the required metadata.json
        if [[ ! -f "$install_path/metadata.json" ]]; then
            log_warning "No metadata.json found, extension may not work"
        fi
    fi
    
    log_success "Extension $extension_name installed successfully"
}

# Install GNOME extensions
install_gnome_extension "gnome-shell-go-to-last-workspace@github.com" "https://github.com/arjan/gnome-shell-go-to-last-workspace.git"
install_gnome_extension "highlight-focus@mipmip.github.com" "https://github.com/mipmip/gnome-shell-extensions-highlight-focus.git"
install_gnome_extension "kmonad-toggle@jurf.github.com" "https://github.com/jurf/gnome-kmonad-toggle.git"

# Remove unwanted default packages
log_step "Removing unwanted default packages"
REMOVE_PACKAGES=(
    "gnome-terminal"
    "gnome-text-editor"
)

# Check which packages are actually installed before trying to remove
for pkg in "${REMOVE_PACKAGES[@]}"; do
    if package_installed "$pkg"; then
        log_info "Removing $pkg"
        remove_packages "$pkg"
    else
        log_info "$pkg not installed, skipping removal"
    fi
done

log_success "GNOME setup completed"
finalize_module_logging "success"
