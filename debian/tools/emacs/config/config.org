#+title: My Emacs configuration
#+STARTUP: overview
:PROPERTIES:
:header-args: :tangle yes
:END:

* Cheat-sheet
** Getting help
=C-h k= to read docs about function that is bound to the inputted shortcut.
=C-h f= to read docs about function selected.
=C-h v= to read docs about variable selected.
** Looking up definitions
=C-h .= to see the signature of class/method/function at point.
=M-.= to go to definition.
=M-,= to go back to the caller.
** Vterm
Do =C-c C-t= to enter copy mode of vterm where you can navigate like you would any other text buffer in emacs.
** Org
*** Basic navigation
Once point is on heading:
- =Tab= cycles local visibility.
- =S-Tab= cycles global visibility.

Once point is in a bulleted-list:
- =Tab= toggles local visibility of the list item if it has nested items;

For both:
- =Alt-Right= or =Alt-Left= promotes or demotes an entry (indents or removes indentation);
- =Alt-Up= and =Alt-Down= moves entry up and down;

*** Refiling
=C-c C-w= to refile current section into another section that is chosed interactively.

*** Tasks
=S-Left= and =S-Right= changes the header status.
=C-c C-t= cycles the statuses too.
=C-c C-c= allows adding tags to the header (on header hover).
=C-c C-s= to schedule the header.
=C-c C-d= to set a header deadline.

"Scheduled" means that is the time to start working on the task if it's a task. If it's an event - time of the event.

=f= and =b= in agenda view I can navigate weeks.
** Coding
=M-/= autocomplete
=M-<TAB>= completion at point
=M-?= to find references
=M-.= find definition
=M-,= go back from prev find definition
* Package management
#+begin_src emacs-lisp
(defun vik/reload-config ()
  "Reload my Emacs configuration from the Org file."
  (interactive)
  (shell-command "dot build tools/emacs")
  (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
#+end_src

Custom version-control install package function. Taken from https://tony-zorman.com/posts/package-vc-install.html
#+begin_src emacs-lisp
(cl-defun vik/vc-install (&key (host "github.com") repo name rev backend)
  "Install a package from a remote if it's not already installed.
This is a thin wrapper around `package-vc-install' in order to
make non-interactive usage more ergonomic.  Takes the following
named arguments:

- HOST the remote where to get the package (e.g., \"gitlab.com\").
  If omitted, this defaults to \"github.com\".

- REPO should be the name of the repository (e.g.,
  \"username/reponame\".

- NAME, REV, and BACKEND are as in `package-vc-install' (which
  see)."
  (let* ((url (format "https://%s/%s" host repo))
         (iname (when name (intern name)))
         (pac-name (or iname (intern (file-name-base repo)))))
    (unless (package-installed-p pac-name)
      (package-vc-install url iname rev backend))))
#+end_src

** Repositories
#+begin_src emacs-lisp
(require 'package)

(setq package-archives
      '(("melpa" . "https://melpa.org/packages/")
        ("org" . "https://orgmode.org/elpa/")
        ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents (package-refresh-contents))
#+end_src
* Fixing defaults
** Unwanted default shortcuts
#+begin_src elisp
(global-set-key (kbd "ESC ESC ESC") #'ignore)
#+end_src
** Hiding garbage files
Store lockfiles and backups outside:
#+begin_src elisp
(defvar vik/custom-cache-location
  "Where all emacs polluting crap is going to be stored.")
(setq vik/custom-cache-location "~/.local/share/emacs")
(unless (file-exists-p vik/custom-cache-location)
  (make-directory vik/custom-cache-location t))

(setq backup-directory-alist `(("." . ,vik/custom-cache-location)))

(setq backup-by-copying t)
(setq delete-old-versions t
  kept-new-versions 6
  kept-old-versions 2
  version-control t)
;; Store lock files in the same directory
(setq lock-file-name-transforms
      `((".*" ,(concat vik/custom-cache-location "/lockfiles/\\1") t)))
#+end_src
** Hide GUI
#+begin_src emacs-lisp
(scroll-bar-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)
(setq inhibit-startup-message t)
(setq visible-bell nil
      ring-bell-function 'vik/flash-mode-line)
(defun vik/flash-mode-line ()
  (invert-face 'mode-line)
  (run-with-timer 0.1 nil #'invert-face 'mode-line))
#+end_src
** Faces
#+begin_src elisp
(setq text-scale-mode-step 1.05)
#+end_src
Toggle for the whole frame to change font size. =custom-set-faces= causes flicker when called, but ensures there's no weird behavior when zooming in and out with =C-x C-+= for example.

Different machines get different values.
#+begin_src emacs-lisp
(defvar vik/big-font-size
  (cond
   ((string= (getenv "DESKTOP") "1") 180)
   ((string= (getenv "LAPTOP") "2") 170)
   (t 170)))

(defvar vik/default-font-size
  (cond
   ((string= (getenv "DESKTOP") "1") 120)
   ((string= (getenv "LAPTOP") "2") 150)
   (t 150)))

(setq vik/presentation-mode-flag nil)

(defun vik/set-global-font-size (size)
  "Set the global font size by modifying the `default` face."
  (custom-set-faces
   `(default ((t (:family "Iosevka" :height ,size))))
   `(fixed-pitch ((t (:family "Iosevka" :height ,size))))
   `(variable-pitch ((t (:family "Iosevka Etoile" :height ,size))))))

(defun vik/toggle-presentation-mode ()
  "Toggle presentation mode. It makes the UI bigger."
  (interactive)
  (setq vik/presentation-mode-flag (not vik/presentation-mode-flag))
  (let ((new-size (if vik/presentation-mode-flag
                      vik/big-font-size
                    vik/default-font-size)))
    (vik/set-global-font-size new-size)
    (message "Font size set to %d" new-size)))

(vik/set-global-font-size vik/default-font-size)
(global-set-key (kbd "<f6>") 'vik/toggle-presentation-mode)
#+end_src
** Theme, spacing and colors
#+begin_src emacs-lisp
(use-package modus-themes
  :ensure t
  :config
  (load-theme 'modus-vivendi :no-confirm))
#+end_src

Toggle between light and dark themes with =F5= key.
#+begin_src emacs-lisp
(defun vik/theme-toggle ()
  (interactive)
  (if (eq (car custom-enabled-themes) 'modus-vivendi)
            (load-theme 'modus-operandi :no-confirm)
          (load-theme 'modus-vivendi :no-confirm)))

(global-set-key (kbd "<f5>") 'vik/theme-toggle)
#+end_src
** Indentation and whitespace
#+begin_src emacs-lisp
;; Set whitespace-style to avoid highlighting long lines
(setq whitespace-style '(face tabs spaces trailing space-before-tab newline
                              indentation empty space-after-tab space-mark
                              tab-mark newline-mark))
;; Exclude newline $ signs
(setq whitespace-style '(face tabs spaces space-mark tab-mark))

;; Enable whitespace-mode in programming modes
(add-hook 'prog-mode-hook 'whitespace-mode)
#+end_src
** Modeline
Show rows and columns at the bottom:
#+begin_src elisp
(setq column-number-mode t)
#+end_src
* Authinfo
#+begin_src elisp
(require 'auth-source)
(setq auth-sources '("~/.authinfo.gpg"))
#+end_src
* File auto-reload
File changed on disk, auto reload it:
#+begin_src emacs-lisp
(global-auto-revert-mode 1)
#+end_src
* Introspection
** Hide warnings
#+begin_src emacs-lisp
;; Suppress warnings and show only errors
(setq warning-minimum-level :error)

;; Configure *Warnings* buffer to only show on actual errors
(add-to-list 'display-buffer-alist
             '("*Warnings*"
               (display-buffer-no-window)
               (allow-no-window . t)))
#+end_src
** Which key
#+begin_src elisp
(which-key-mode 1)
#+end_src
* In-buffer movement & editing
** Multiple cursors
Use by selecting region-symbol beforehand:
#+begin_src emacs-lisp
(use-package multiple-cursors
  :ensure t
  :config
  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this))
#+end_src
** Movement
Never auto insert tabs:
#+begin_src elisp
(setq-default indent-tabs-mode nil)
#+end_src
** Copying and pasting
Selection gets replaced on yank:
#+begin_src emacs-lisp
(delete-selection-mode)
#+end_src
* Navigation
** History
#+begin_src emacs-lisp
(use-package undo-tree
  :ensure t
  :init
  (global-undo-tree-mode) ;; Enable undo-tree globally
  :config
  ;; Set undo-tree persistent history directory
  (setq undo-tree-history-directory-alist
        '(("." . "~/.local/share/emacs/undo-tree")))
  (setq undo-tree-auto-save-history t) ;; Enable saving history to disk

  ;; Optional: Customize undo-tree keybindings
  (global-set-key (kbd "C-\\") 'undo-tree-redo) ;; Redo keybinding
  (setq undo-tree-visualizer-timestamps t) ;; Show timestamps in visualizer
  (setq undo-tree-visualizer-diff t)) ;; Show diffs in visualizer
#+end_src
** Saving last point location
#+begin_src emacs-lisp
(save-place-mode 1)
#+end_src
** TODO Window management
=M-o= does not work properly in the html-mode.
#+begin_src emacs-lisp
(global-set-key (kbd "M-o") 'other-window)
#+end_src
** Mouse
#+begin_src emacs-lisp
(setq mouse-autoselect-window t)
#+end_src

Makes scrolling smooth:
#+begin_src emacs-lisp
(pixel-scroll-precision-mode)
#+end_src

Point stays at the center of the screen:
#+begin_src elisp
(setq scroll-conservatively 101)
#+end_src
* Snippets
#+begin_src emacs-lisp
(defun vik/insert-timestamp ()
  (interactive)
  (insert (format-time-string "%Y %b %d, %A %H:%M")))

(defun vik/insert-datestamp ()
  (interactive)
  (insert (format-time-string "%Y %b %d, %A")))
#+end_src
* Appearance
** Tabs
#+begin_src emacs-lisp
(setq tab-bar-close-button-show nil) ; Hide close button for simplicity
(setq tab-bar-new-tab-choice "*scratch*") ; New tab starts on *scratch* buffer
#+end_src
** Point
#+begin_src emacs-lisp
(blink-cursor-mode 0)
#+end_src
Enable hl-line for specific modes
#+begin_src elisp
(setq hl-line-sticky-flag nil)
(add-hook 'text-mode-hook 'hl-line-mode)
(add-hook 'prog-mode-hook 'hl-line-mode)
#+end_src

Ensures end line in the file. Useful to correctly display hl-line on the last line
#+begin_src elisp
(setq require-final-newline t)
#+end_src
* Menus and search
#+begin_src emacs-lisp
(fido-vertical-mode)
(recentf-mode 1)
#+end_src
* Org
** Mapping
#+begin_src elisp
(define-prefix-command 'org-window-map)
(global-set-key (kbd "C-x o") 'org-window-map)
#+end_src
** Agenda
#+begin_src elisp
(define-key 'org-window-map (kbd "a") 'org-agenda)
#+end_src

Sub-headings inherit tags from parent headings:
#+begin_src elisp
(setq org-use-tag-inheritance t)
#+end_src

Include gpg encrypted file headings to be displayed in agenda:
#+begin_src elisp
(setq org-agenda-file-regexp "\\`[^.].*\\.org\\\(\\.gpg\\\)?\\'")
#+end_src

See global list of tags in =C-c C-q=:
#+begin_src elisp
(setq org-complete-tags-always-offer-all-agenda-tags t)
#+end_src

What to log when changing entry status:
#+begin_src elisp
(setq org-log-done 'time)
(setq org-agenda-start-with-log-mode t)
#+end_src

Shorter labels for scheduled and deadline headings:
#+begin_src elisp
(setq org-agenda-scheduled-leaders '("S: " "S: ")
      org-agenda-deadline-leaders  '("D: " "D. in %2d d.: " "D. %2d d. ago: "))
#+end_src

Replaces tags with shorter emojis:
#+begin_src elisp
(defun my/org-agenda-replace-keywords-with-emojis ()
  "Replace TODO keywords in the agenda with custom emojis."
  (save-excursion
    (goto-char (point-min))
    (let ((case-fold-search t))
      (while (re-search-forward "^\\(.*\\)\\b\\(TODO\\|DONE\\)\\b" nil t)
        (let* ((prefix (match-string 1))
               (keyword (match-string 2))
               (emoji
                (pcase keyword
                  ("TODO" "📋")
                  ("DONE" "✅")
                  ("SKIPPED" "⏭️")
                  (_ keyword))))
          (replace-match (concat prefix emoji) t t))))))

(add-hook 'org-agenda-finalize-hook #'my/org-agenda-replace-keywords-with-emojis)
#+end_src

Fixes spacing between date/timestamps when range is present:
#+begin_src elisp
(defun my/org-agenda-fix-timerange-spacing ()
  "Adjust spacing between time/time-range and filename in Org agenda lines."
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward
            "^\\([ 0-9]+:[0-9]+\\)\\(-[0-9]+:[0-9]+\\)?\\(\\s-*\\)\\([^ \n]\\)" nil t)
      (let* ((start (match-string 1))
             (end (match-string 2))
             (space " ")
             (after (match-string 4)))
        (replace-match (concat start (or end "") space after) t t)))))

(add-hook 'org-agenda-finalize-hook #'my/org-agenda-fix-timerange-spacing)
#+end_src

Custom agendas:
#+begin_src elisp
(defun vik/org-agenda-skip-entry-non-work ()
  "Skip entries that are not tagged with 'work'. Intended to be used in custom agendas."
  (let ((tags (org-get-tags)))
    (when (not (member "work" tags))
      (or (outline-next-heading) (point-max)))))

(defun vik/org-agenda-skip-entry-work ()
  "Skip entries that are tagged with 'work'. Intended to be used in custom agendas."
  (let ((tags (org-get-tags-at (point))))
    (when (member "work" tags)
      (or (outline-next-heading) (point-max)))))

(setq org-agenda-custom-commands
      '(("w" "Work"
         ((agenda ""
                  ((org-agenda-overriding-header "Work")
                   (org-agenda-span 7)
                   (org-agenda-skip-function #'vik/org-agenda-skip-entry-non-work)))
          (tags-todo "+work+PRIORITY=\"A\""
                     ((org-agenda-overriding-header "High priority")))
          (tags-todo "+work"
                     ((org-agenda-overriding-header "Work non-scheduled")
                      (org-agenda-skip-function
                       '(org-agenda-skip-entry-if 'deadline 'scheduled 'done))))
          ))
        ("p" "Personal"
         ((agenda ""
                  ((org-agenda-overriding-header "Personal")
                   (org-agenda-span 7)
                   (org-agenda-skip-function #'vik/org-agenda-skip-entry-work)))
          (tags-todo "-work+PRIORITY=\"A\""
                     ((org-agenda-overriding-header "High priority")))
          (tags-todo "+occurence-work"
                     ((org-agenda-overriding-header "Occurences")))
          (tags-todo "+travel+event-work"
                     ((org-agenda-overriding-header "Events & travels")))
          (tags-todo "-occurence-event-travel-work"
                     ((org-agenda-overriding-header "Other without timeframe")
                      (org-agenda-skip-function
                       '(org-agenda-skip-entry-if 'deadline 'scheduled 'done))))
          ))))
#+end_src

Exclude =closed= items to hide them in agenda view:
#+begin_src elisp :tangle no
(setq org-agenda-log-mode-items '(closed clock))
#+end_src

Format the agenda view:
#+begin_src elisp
(setq org-agenda-prefix-format
      '((todo . "  %-36:c %s%b")
        (tags . "  %-36:c %s%b")
        (search . "  %-36:c %s%b")
        (agenda . "  %t%-36:c %s%b")))
#+end_src

Skip empty days:
#+begin_src elisp :tangle no
(setq org-agenda-show-all-dates nil)
#+end_src

#+begin_src elisp
(setq org-agenda-include-diary t)
#+end_src
** TODO Code-blocks
TODO These can be run as code blocks - fails for some reason when ran on start-up:
#+begin_src elisp
;; (setq org-babel-load-languages ((ruby . t) (emacs-lisp . t)))
#+end_src
** TODO Sources
Should make those be read from environment:
#+begin_src emacs-lisp
(setq org-directory "~/Documents/notes/org/0-inbox/")
(setq org-agenda-files '("~/Documents/notes/org/0-inbox/"
                         "~/Documents/notes/org/1-projects/"
                         "~/Documents/notes/org/2-areas/"
                         "~/Documents/notes/org/3-resources/"))
#+end_src
** Fixes
#+begin_src emacs-lisp
(setq org-hide-emphasis-markers t)
(setq org-edit-src-content-indentation 0)

;; fixes the issue or child block face bleeding out into the parent heading
;; https://debbugs.gnu.org/cgi/bugreport.cgi?bug=52587#49
(setq org-fontify-whole-block-delimiter-line nil)

(setq org-attach-id-dir "~/Documents/notes/resources/attachments/")

(add-hook 'org-mode-hook #'org-indent-mode)
(add-hook 'org-mode-hook 'visual-line-mode) ;; smart word wrap
#+end_src

Smart return which tries to not enter new-lines in a folder code block.
#+begin_src emacs-lisp
(defun vik/org-insert-line-after-block ()
  "Insert a new line immediately after the current Org source block without unfolding it."
  (interactive)
  (when (org-in-block-p '("src"))
    (let ((block-end (save-excursion
                       (goto-char (org-element-property :end (org-element-context)))
                       (skip-chars-backward "\n")
                       (point))))
      ;; Move to the end of the block
      (goto-char block-end)
      ;; Insert a new line
      (newline-and-indent))))

(defun vik/org-return ()
  "Custom return function for Org mode.
If on a folded source block, add a new line after the block without unfolding.
If on an unfolded source block, add a new line inside the block.
Otherwise, perform regular `org-return` behavior."
  (interactive)
  (let ((context (org-element-context)))
    (if (and (eq (org-element-type context) 'src-block)
             (save-excursion
               (goto-char (org-element-property :begin context))
               (end-of-line)
               (eq (get-char-property (point) 'invisible) 'org-fold-block)))
        ;; If the source block is folded, add a line after it
        (vik/org-insert-line-after-block)
      ;; If inside an unfolded source block, insert a newline inside the block
      (if (org-in-block-p '("src"))
          (newline-and-indent)
        ;; Otherwise, perform the regular `org-return` behavior
        (org-return)))))

;; Remap `Enter` key in Org mode to use `vik/org-return`
(with-eval-after-load 'org
  (define-key org-mode-map (kbd "RET") 'vik/org-return))
#+end_src

Disable automatic blank lines when inserting a new heading.
#+begin_src emacs-lisp
(setf org-blank-before-new-entry '((heading . nil) (plain-list-item . nil)))
(setq org-cycle-separator-lines 0)
#+end_src
** Appearance
Pretty headings.
#+begin_src emacs-lisp
(use-package org-superstar
  :ensure t
  :after org
  :hook (org-mode . org-superstar-mode)
  :config
  ;; Set basic title font
  (set-face-attribute 'org-level-8 nil :weight 'bold :inherit 'default)
  (set-face-attribute 'org-level-7 nil :inherit 'org-level-8)
  (set-face-attribute 'org-level-6 nil :inherit 'org-level-8)
  (set-face-attribute 'org-level-5 nil :inherit 'org-level-8)
  (set-face-attribute 'org-level-4 nil :inherit 'org-level-8)
  (set-face-attribute 'org-level-3 nil :inherit 'org-level-8 :height 1.05)
  (set-face-attribute 'org-level-2 nil :inherit 'org-level-8 :height 1.1)
  (set-face-attribute 'org-level-1 nil :inherit 'org-level-8 :height 1.15)

  ;; Define custom headline bullets, with a fallback for terminal use
  (setq org-superstar-headline-bullets-list '("◉" ("🞛" ?◈) "○" "▷"))

  ;; Disable bullet cycling to emphasize headline hierarchy
  (setq org-superstar-cycle-headline-bullets nil)

  ;; Set a fallback for leading stars in terminals
  (setq org-superstar-leading-fallback ?\s)
  (setq org-superstar-leading-bullet ?\s
        org-superstar-leading-fallback ?\s
        org-hide-leading-stars nil
        org-superstar-todo-bullet-alist
        '(("TODO" . 9744)
          ("[ ]"  . 9744)
          ("DONE" . 9745)
          ("[X]"  . 9745))))
#+end_src

Make formatted text appear with markers when hover over.
#+begin_src emacs-lisp :tangle no
(use-package org-appear
  :ensure t
  :hook (org-mode . org-appear-mode)
  :custom
  (org-appear-autoemphasis t)       ;; Toggle emphasis markers
  (org-appear-autosubmarkers t)     ;; Toggle subscript/superscript markers
  (org-appear-autoentities t)       ;; Toggle Org entities
  (org-appear-autokeywords t)       ;; Toggle keywords in org-hidden-keywords
  (org-appear-inside-latex t)       ;; Toggle LaTeX fragment elements
  (org-appear-delay 0.5)            ;; Delay before toggling
  (org-appear-trigger 'always))     ;; Trigger setting
#+end_src
** Point after ellipsis fix
Sometimes when point ends up positioned after heading ellipsis, you cannot `org-cycle' it.
#+begin_src emacs-lisp
(defun my-org-prepare-expand-heading ()
  "Move point to before ellipsis, if after ellipsis."
  (when (and (not (org-at-heading-p))
             (save-excursion
               (org-end-of-line)
               (org-at-heading-p)))
    (org-end-of-line)))

(add-hook 'org-tab-first-hook #'my-org-prepare-expand-heading)
#+end_src
** Latex
#+begin_src elisp
(setq org-preview-latex-default-process 'imagemagick)
(setq org-preview-latex-process-alist
      '((imagemagick :programs ("latex" "magick")
                     :description "imagemagick"
                     :message "you need to install the programs: latex and imagemagick."
                     :image-input-type "dvi"
                     :image-output-type "png"
                     :latex-compiler ("latex -interaction nonstopmode -output-directory %o %f")
                     :image-converter ("convert -density 200 -trim -quality 100 %f %O"))))

(setq org-format-latex-options
      (plist-put org-format-latex-options :scale 1.1))
(setq org-latex-preview-debug t)
#+end_src
** Images
Show images max 400px each side, with fallback to ORG_ATTR:
#+begin_src elisp
(setq org-image-actual-width (list 400))
(add-hook 'org-mode-hook #'org-display-inline-images)
#+end_src

Move cache data out of the way:
#+begin_src elisp
(setq org-preview-latex-image-directory
      (concat vik/custom-cache-location "/ltximg/"))
#+end_src
** Links
#+begin_src elisp
(setq org-id-link-to-org-use-id 'create-if-interactive)

(global-set-key (kbd "C-c l s") 'org-store-link)
#+end_src

#+begin_src elisp
(defun vik/org-remove-link-url ()
  "Replace an Org link at point with its description, removing the URL."
  (interactive)
  (when (org-in-regexp org-link-bracket-re 1)
    (let ((desc (or (match-string 2) "")))
      (replace-match desc t t))))
(global-set-key (kbd "C-c l r") 'vik/org-remove-link-url)
#+end_src
** Export
Exporting as Github flavored markdown to clipboard:
#+begin_src elisp
(use-package ox-gfm :ensure t)

(defun vik/org-region-to-clipboard-as-markdown ()
  "Export the selected region from Org mode to Markdown and copy it to the clipboard."
  (interactive)
  (if (use-region-p)
      (let ((org-export-with-toc nil) ; Disable table of contents
            (region-text (buffer-substring-no-properties (region-beginning) (region-end))))
        (with-temp-buffer
          (insert region-text)
          (org-mode)
          (let ((markdown-text (org-export-as 'gfm nil nil t nil)))
            (with-temp-buffer
              (insert markdown-text)
              (clipboard-kill-region (point-min) (point-max)))))
        (message "Region exported to Markdown and copied to clipboard."))
    (message "No region selected!")))

#+end_src
** Refiling
#+begin_src elisp
(setq org-refile-targets '((nil :maxlevel . 6)
                           (org-agenda-files :maxlevel . 6)))
(setq org-refile-targets
      '((nil :maxlevel . 6) ; Current buffer, up to level 6
        (org-agenda-files :maxlevel . 6) ; Agenda files, up to level 6
        (nil :level . 0) ; Current buffer, only top-level headings
        (org-agenda-files :level . 0))) ; Agenda files, only top-level headings

(setq org-refile-use-outline-path 'file)
(setq org-outline-path-complete-in-steps nil)
#+end_src
** Task managemant
So that =C-c C-t= stores entries into a =LOGBOOK= drawer:
#+begin_src elisp
(setq org-log-into-drawer t)
#+end_src
** Capture
#+begin_src elisp
(global-set-key (kbd "C-c c") 'org-capture)
#+end_src

#+begin_src elisp
(setq org-capture-templates
      '(("t" "Insert Org Title in Current File" plain
         (function (lambda () (or (buffer-file-name) (error "No current file!"))))
         "#+TITLE: %^{Title}\n"
         :immediate-finish t)))
#+end_src
* Project
#+begin_src elisp
(with-eval-after-load 'project
  (add-to-list 'project-switch-commands '(magit-project-status "Magit") t)
  (keymap-set project-prefix-map "m" #'magit-project-status))
#+end_src
* Coding
** Comments
#+begin_src emacs-lisp
(defun vik/comment-line ()
  "Comment or uncomment the current line without moving the cursor down."
  (interactive)
  (save-excursion
    (beginning-of-line)
    (set-mark (line-end-position))
    (comment-or-uncomment-region (point) (mark))))
(global-set-key (kbd "C-;") 'vik/comment-line)
#+end_src
** Word symbols
Camel-cased symbols will be recognized as words.
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'subword-mode)
#+end_src
** Documentation
Use =C-h .= to look up documentation of thing at point.
#+begin_src emacs-lisp
(global-eldoc-mode 1)
(setq eldoc-echo-area-use-multiline-p t)
(setq eldoc-echo-area-prefer-doc-buffer t)
#+end_src
** Mise
#+begin_src elisp
(use-package mise
  :ensure t
  :hook (after-init . global-mise-mode))
#+end_src
** Eglot
Attaches eglot to every programming language buffer:
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'eglot-ensure)
(setq eglot-report-progress nil)
#+end_src
#+begin_src elisp
(defun my/eglot-register-server (mode bin &rest args)
  "Associate MODE with a language server BIN and ARGS in `eglot-server-programs`."
  (add-to-list 'eglot-server-programs
               `(,mode . (,bin ,@args))))
#+end_src
** Basic code navigation with =dumb-jump=
#+begin_src emacs-lisp
(use-package dumb-jump
  :ensure t
  :config
  (add-hook 'xref-backend-functions #'dumb-jump-xref-activate))
#+end_src
** Treesitter
#+begin_src emacs-lisp
(defun my/treesit-setup-lang (lang source)
  "Register and install a single treesit LANG from SOURCE."
  (with-eval-after-load 'treesit
    (add-to-list 'treesit-language-source-alist (cons lang source))
    (unless (treesit-ready-p lang)
      (treesit-install-language-grammar lang))))
#+end_src
** Zig
#+begin_src emacs-lisp
(use-package zig-mode
  :ensure t
  :config
  (add-to-list 'auto-mode-alist '("\\.zig\\'" . zig-mode))
  (add-to-list 'auto-mode-alist '("\\.zig.zon\\'" . zig-mode))
  (with-eval-after-load 'eglot
    (my/eglot-register-server 'zig-mode "zls"))
  (my/treesit-setup-lang 'zig '("https://github.com/tree-sitter-grammars/tree-sitter-zig")))
#+end_src
** Dart & Flutter
#+begin_src elisp
(use-package dart-mode
  :ensure t
  :config
  (with-eval-after-load 'eglot
    (my/eglot-register-server 'dart-mode "dart" "language-server" "--client-id" "emacs.eglot-dart" "--protocol" "lsp")))
#+end_src

#+begin_src elisp
(use-package dart-mode
  :hook (dart-mode . flutter-test-mode))

(use-package flutter
  :ensure t
  :after dart-mode
  :bind (:map dart-mode-map
              ("C-c r" . #'flutter-run-or-hot-reload)))
#+end_src
** Ruby
=C-c {= ruby toggle block type.
=C-c '= ruby inside change quote type.
=C-c ]= flymake-goto-next-error
=C-c [= flymake-goto-prev-error
#+begin_src emacs-lisp
(use-package ruby-ts-mode
  :ensure t
  :config
  (add-to-list 'auto-mode-alist '("\\.rb\\'" . ruby-ts-mode))
  (add-to-list 'auto-mode-alist '("\\Gemfile\\'" . ruby-ts-mode))
  (add-to-list 'auto-mode-alist '("\\Rakefile\\'" . ruby-ts-mode))
  (with-eval-after-load 'eglot
    (my/eglot-register-server 'ruby-mode "solargraph" "stdio"))
  (my/treesit-setup-lang 'ruby '("https://github.com/tree-sitter/tree-sitter-ruby")))
#+end_src
#+begin_src elisp
(add-hook 'ruby-ts-mode-hook
          (lambda ()
            (local-set-key (kbd "C-c ]") #'flymake-goto-next-error)
            (local-set-key (kbd "C-c [") #'flymake-goto-prev-error)))
#+end_src
** Lua
#+begin_src elisp
(use-package lua-mode
  :ensure t
  :mode "\\.lua\\'")
#+end_src
** Yaml
#+begin_src elisp
(use-package yaml-mode
  :ensure t
  :mode "\\.yml\\'\\|\\.yaml\\'"
  :hook (yaml-mode . eglot-ensure))
#+end_src
** SQL
#+begin_src elisp
(use-package sqlformat
  :ensure t
  :config
  (setq sqlformat-command 'sqlformat))
#+end_src
** Javascript/Typescript
#+begin_src elisp
(my/treesit-setup-lang 'typescript
  '("https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src"))
(my/treesit-setup-lang 'tsx
  '("https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src"))
#+end_src
* Terminal
#+begin_src emacs-lisp
(use-package vterm
  :ensure t)
  (setq
   vterm-max-scrollback 100000
   vterm-timer-delay nil)
#+end_src

#+begin_src emacs-lisp
(defun vik/vterm-open (new-tab)
  "Open a new vterm. If NEW-TAB is non-nil, open in a new tab. Sets the directory to project root or ~/ if no project is defined."
  (let* ((project (project-current))
        (dir (if project
                 (project-root project)
               "~/")))
    (when new-tab
      (tab-bar-new-tab))
    ;; Set the default directory and open a new vterm
    (let ((default-directory dir)) ;; Temporarily bind default-directory for vterm
      (let ((current-prefix-arg '(4))) ;; Simulates C-u
	(call-interactively #'vterm)))))

(defun vik/vterm-in-current-window ()
  "Open a new vterm in the current window."
  (interactive)
  (vik/vterm-open nil))

(defun vik/vterm-new-tab ()
  "Open a new vterm in a new tab."
  (interactive)
  (vik/vterm-open t))
#+end_src

#+begin_src emacs-lisp
(global-set-key (kbd "C-x t T") 'vik/vterm-new-tab)
#+end_src
* Version control
** Magit
#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :config
  (setq magit-define-global-key-bindings nil)

  (defvar vik/magit-prefix-map (make-sparse-keymap)
    "Keymap for custom Magit-related keybindings.")
  (define-key global-map (kbd "C-x g") vik/magit-prefix-map)
  (define-key vik/magit-prefix-map (kbd "g") #'magit-status)
  (define-key vik/magit-prefix-map (kbd "d") #'magit-dispatch)
  (define-key vik/magit-prefix-map (kbd "f") #'magit-file-dispatch))
#+end_src
** Links
#+begin_src emacs-lisp
(unless (package-installed-p 's)
  (package-install 's))

(use-package git-link
  :init (vik/vc-install :host "github.com" :repo "sshaw/git-link")
  :config
  (setq git-link-use-commit t))
#+end_src

#+begin_src elisp
(global-set-key (kbd "C-x C-g l") 'git-link)
#+end_src
** Gutter
#+begin_src elisp
(use-package git-gutter
  :ensure t
  :config
  (custom-set-variables
   '(git-gutter:visual-line t))
  (custom-set-variables
   '(git-gutter:hide-gutter t))

  (custom-set-variables
   '(git-gutter:modified-sign "┃")
   '(git-gutter:added-sign "┃")
   '(git-gutter:deleted-sign "┃"))

  (set-face-background 'git-gutter:modified nil)
  (set-face-background 'git-gutter:added nil)
  (set-face-background 'git-gutter:deleted nil)

  (set-face-foreground 'git-gutter:modified "yellow")
  (set-face-foreground 'git-gutter:added "green")
  (set-face-foreground 'git-gutter:deleted "red")

  (add-hook 'prog-mode-hook 'git-gutter-mode)
  (add-hook 'text-mode-hook 'git-gutter-mode))
#+end_src
* KMonad
#+begin_src emacs-lisp
(unless (package-installed-p 's)
  (package-install 's))

(unless (package-installed-p 'kbd-mode)
  (package-vc-install
   '(kbd-mode . (:url "https://github.com/kmonad/kbd-mode"))))
#+end_src
* Dired
#+begin_src elisp
(with-eval-after-load 'dired
  (define-key dired-mode-map (kbd "b") #'dired-up-directory))

(with-eval-after-load 'dired
  (define-key dired-mode-map (kbd "e") 'eshell))

(setq dired-listing-switches "-lah --group-directories-first")
#+end_src

View file under point in an external program by pressing =V=:
#+begin_src elisp
(defun my/dired-open-with-xdg ()
  "Open the current file in dired using browse-url-xdg-open."
  (interactive)
  (let ((file (dired-get-file-for-visit)))
    (browse-url-xdg-open file)))

(with-eval-after-load 'dired
  (define-key dired-mode-map (kbd "V") #'my/dired-open-with-xdg))
#+end_src
