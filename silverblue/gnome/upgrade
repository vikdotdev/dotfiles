#!/bin/bash

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DOT_HOME="$(dirname "$(dirname "$SCRIPT_DIR")")"

source "$DOT_HOME/lib/colors.sh"
source "$DOT_HOME/lib/constants.sh"
source "$DOT_HOME/lib/utils.sh"
source "$DOT_HOME/lib/logging.sh"

MODULE="gnome"
init_module_logging "$MODULE"

log_header "Upgrading GNOME Extensions"

# Upgrade GNOME extension: gnome-shell-go-to-last-workspace
log_step "Upgrading gnome-shell-go-to-last-workspace extension"

EXTENSION_NAME="gnome-shell-go-to-last-workspace@github.com"
REPO_PATH="$REPOS_DIR/gnome-shell-go-to-last-workspace"
INSTALL_PATH="$HOME/.local/share/gnome-shell/extensions/$EXTENSION_NAME"

# Check if extension is installed
if [[ ! -d "$INSTALL_PATH" ]]; then
    log_info "Extension not installed, skipping upgrade"
elif [[ ! -d "$REPO_PATH" ]]; then
    log_error "Repository not found at $REPO_PATH, cannot upgrade"
else
    # Update the repository
    log_info "Updating repository"
    cd "$REPO_PATH"
    git pull
    
    # Check if extension needs to be rebuilt/reinstalled using metadata.json comparison
    NEEDS_UPGRADE=false
    if [[ ! -f "$INSTALL_PATH/metadata.json" ]]; then
        NEEDS_UPGRADE=true
    elif [[ -f "metadata.json" ]] && ! cmp -s "metadata.json" "$INSTALL_PATH/metadata.json"; then
        NEEDS_UPGRADE=true
    fi
    
    if $NEEDS_UPGRADE; then
        log_info "Building and installing updated extension"
        make build
        make install
        log_success "Extension upgraded successfully"
    else
        log_info "Extension already up to date"
    fi
fi

log_success "GNOME upgrade completed"
finalize_module_logging "success"